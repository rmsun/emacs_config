/***********************************************
Describe: this program is a very simple example
          of http server
Date: Nov 14, 2011
 ***********************************************/

#ifndef __SHTTPD_H__
#define __SHTTPD_H__
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/types.h>           /*primitive system data types*/
#include <sys/stat.h>            /*file status*/
#include <sys/socket.h>          /*sockets interface*/
#include <sys/wait.h>            /*process control*/
#include <sys/times.h>           /*process times*/
#include <netinet/in.h>          /*Internet address family*/
#include <netdb.h>               /*network database operations*/
#include <pthread.h>             /*threads*/
#include <arpa/inet.h>           /*Internet definitions*/
#include <signal.h>              /*signals*/
#include <errno.h>               /*error codes*/
#include <unistd.h>              /*symbolic constants*/
#include <dirent.h>              /*directory entries*/
#include <limits.h>              /*implementation constants*/
#include <getopt.h>              /**/
#include <fcntl.h>               /*file control*/
#include <ctype.h>               /*character types*/
#include <stddef.h>              /*standard definitons*/

/*线程状态值*/
enum WORKER_STATUS
{
     WORKER_INITED, 
     WORKER_RUNNING, 
     WORKER_DETACHING, 
     WORKER_DETACHED, 
     WORKER_IDEL
};

struct conf_opts
{
     char CGIRoot[128];         /*CGI根路径*/
     char DefaultFile[128];     /*默认文件路径*/
     char DocumentRoot[128];    /*根文件路径*/
     char ConfigFile[128];      /*配置文件路径和名称*/
     int  ListenPort;           /*侦听端口*/
     int  MaxClient;            /*最大客户端数量*/
     int  TimeOut;              /*超时时间*/
     int  InitClient;           /*初始化线程数量*/
};
     
/*HTTP协议的方法*/
typedef enum SHTTPD_METHOD_TYPE
{
     METHOD_GET,
     METHOD_POST,
     METHOD_PUT,
     METHOD_DELETE,
     METHOD_HEAD,
     METHOD_CGI,
     METHOD_NOTSUPPORT
}SHTTPD_METHOD_TYPE;

enum HTTP_HEADER_TYPE
{
     HDR_DATE,
     HDR_INT,
     HDR_STRING
};

typedef struct shttpd_method
{
     SHTTPD_METHOD_TYPE type;
     int name_index;
}shttpd_method;

/*For parsing. This guy represents a substring.*/
typedef struct vec
{
     char *ptr;
     int  len;
     SHTTPD_METHOD_TYPE type;
}vec;

#define big_int_t long

struct http_header 
{
     int len;        /*Header name length*/
     int type;       /*Header type*/
     size_t offset;  /*Value placeholder*/
     char *name;     /*Header name*/
};

/*
 * This structure tells how HTTP headers must be parsed.
 * Used by parse_headers() function.
 */
#define OFFSET(x)  offsetof(struct headers, x)

/*
 * This thing is aimed to hold values of any type.
 * Used to store parsed header's values.
 */
union variant
{
     char *v_str;
     int v_int;
     big_int_t v_big_int;
     time_t v_time;
     void (*v_func)(void);
     void *v_void;
     struct vec v_vec;
};

#define URI_MAX  16384          /*Default max request size*/

/*
 * This guy holds parsed HTTP headers
 */
struct headers
{
     union variant cl;          /*Content-Length*/
     union variant ct;          /*Content-Type*/
     union variant connection;  /*Connection*/
     union variant ims;         /*If-Modified-Since*/
     union variant user;        /*Remote user name*/
     union variant auth;        /*Authorization*/
     union variant useragent;   /*User-Agent*/
     union variant referer;     /*Referer*/
     union variant cookie;      /*Cookie*/
     union variant location;    /*Location*/
     union variant range;       /*Range*/
     union variant status;      /*Status*/
     union variant transenc;    /*Transfer-Encoding*/
};

sturct cgi
{
     int iscgi;
     struct vec bin;
     struct vec para;
};

struct worker_ctl;
sturct worker_opts
{
     pthread_t tid;           /*线程id*/
     int flags;               /*线程状态*/
     pthread_mutex_t mutex;   /*互斥量*/
     struct worker_ctl *work; /*本线程的总控结构*/
};

struct work_conn;
struct conn_request
{
     struct vec req;            /*请求向量*/
     char *head;                /*请求头部，'\0'结尾*/
     char *uri;                 /*请求URI，'\0'结尾*/
     char rpath[URI_MAX];       /*请求文件的真实地址'\0'结尾*/
     
     int method;                /*请求类型*/
     /*HTTP版本信息*/
     unsigned long major;       /*主版本*/
     unsigned long minor;       /*副版本*/
     
     struct headers ch;         /*头部结构*/
     struct worker_conn *conn;  /*连接结构指针*/
     int err;
};

/*HTTP响应结构*/
struct conn_response
{
     struct vec res;            /*响应向量*/
     time_t birth_time;         /*建立时间*/
     time_t expire_time;        /*超时时间*/
     
     int status;                /*响应状态值*/
     int cl;                    /*响应内容长度*/
     
     int fd;                    /*请求文件描述符*/
     struct stat fsate;         /*请求文件状态*/
     struct worker_conn *conn;  /*连接结构指针*/
};

struct worker_conn
{
     #define K 1024
     char dreq[16*K];           /*请求缓冲区*/
     char dres[16*K];           /*响应缓冲区*/
     
     int cs;                    /*客户端套接字文件描述符*/
     int to;                    /*客户端无响应，超时退出时间*/
     
     struct conn_response con_res;
     struct conn_request con_req;
     
     struct worker_ctl *work;   /*本线程的总控结构*/
};

struct worker_ctl
{
     struct worker_opts opts;
     struct worker_conn conn;
};
     
struct mine_type
{
     char *extension;
     int type;
     int ext_len;
     char *mine_type;
};

void Para_Init(int argc, char *argv[]);

int Request_Parse(struct worker_ctl *wctl);
int Request_Handle(struct worker_ctl *wctl);

int Worker_ScheduleRun();
int Worker_ScheduleStop();
void Method_Do(struct worker_ctl *wctl);
void Uri_Parse(char *src, int len);

struct mine_type *Mine_Type(char *uri, int len, struct worker_ctl *wctl);

#define DBGPRINT printf

#endif
